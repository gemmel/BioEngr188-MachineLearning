{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 4 - Partial Least Squares Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "inputHidden": false,
    "outputHidden": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import scipy as sp, numpy as np, sklearn as skl, pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "from scipy.io import loadmat\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn import cross_validation\n",
    "from sklearn.cross_decomposition import PLSRegression\n",
    "import matplotlib.patches as mpatches\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import LeaveOneOut\n",
    "from sklearn.model_selection import LeaveOneGroupOut\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "plt.style.use(\"ggplot\")\n",
    "\n",
    "data = loadmat('wk4_Cosgrove-data.mat', squeeze_me=True)['s']\n",
    "\n",
    "X = data['X'].item() # the untransformed data matrix (66x102)\n",
    "Y = data['Y'].item() # the untransformed LDH release at 48hours. (66x1)\n",
    "phosphoproteins = data['phosphoproteins'].item() # names of phosphoproteins\n",
    "conditions = data['conditions'].item() # cell array of the 66 conditions\n",
    "drugList = data['drugList'].item() # description of the drugs used in each of the 66 conditions\n",
    "drugListToxic = data['drugListToxic'].item() # binary value corresponding to whether drugList[i] is toxic\n",
    "drugs = data['drugs'].item() # binary matrix mapping which measurements correspond to a drug treatment in drugList\n",
    "cytokineList = data['cytokineList'].item() # cell array of cytokine treatments\n",
    "ind4pProtein = data['ind4pProtein'].item() # column indices corresponding to measurements of 4 phosphoprotein subset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (1) Perform PLSR on the matrixes X and Y. How many principle components do you need for each to explain 90% of the variance? Discuss your findings.\n",
    "\n",
    "Hint: Be sure to normalize each dataset as needed for the analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2Y value = 0.923198313534 .\n"
     ]
    }
   ],
   "source": [
    "# Rename PLS regression \n",
    "# Here we assign number of princle components and maximum iterations\n",
    "PLS = PLSRegression(n_components = 4, scale=True, max_iter =1000) \n",
    "\n",
    "# We only want LDH release at 48 hours\n",
    "Y48 = Y[:,4] \n",
    "\n",
    "#Scale values for X and Y\n",
    "X_scaled = scale(X)\n",
    "Y48_scaled = scale(Y48)\n",
    "\n",
    "# Learn and apply the dimension reduction on the training data\n",
    "xSc, ySc = PLS.fit_transform(X_scaled,Y48_scaled)\n",
    "\n",
    "# Score X and Y48\n",
    "R2Y = PLS.score(X_scaled,Y48_scaled)\n",
    "print('R2Y value =', R2Y,'.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I found that we needed to perform the PLSR with at least four principle components in order to explain 90% of the variance. This is indicated by our R2Y value of 0.923 when allowing for four components during the regression. When the number of principle compnents is set to three, for example, our R2Y equals 0.892, meaning that three components can only explain 89.2% of the variance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (2) Recreate the Figure S2A plot from Cosgrove et al. supplementary information. This is the PLSR scores plot (for PC1 and PC2), with toxic drugs colored according to the drug type and all other drugs are not colored. Use the drugList, drugListToxic to identify these categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "inputHidden": false,
    "outputHidden": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1eaac860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use the drugListToxic as a mask \n",
    "toxMask = drugListToxic\n",
    "tox_iters = np.arange(11)[toxMask==1]\n",
    "# We will have one color for each toxic drug\n",
    "colors= ['r', 'b','g','k','m','c']\n",
    "c_indx = -1\n",
    "\n",
    "# Plot figure for different drug scores (PCs) one at a time\n",
    "plt.figure(1, figsize=(8,8))\n",
    "for indx in np.arange(drugs.shape[1]): # numbers between 0 and 10\n",
    "    if indx not in tox_iters:\n",
    "        C = 'gray'\n",
    "        alph = 0.5\n",
    "    else:\n",
    "        c_indx += 1\n",
    "        C = colors[c_indx]\n",
    "    mask = drugs[:, indx]==1\n",
    "    xVals = xSc[:,0]\n",
    "    yVals = xSc[:,1]\n",
    "    drugX = xVals[mask]\n",
    "    drugY = yVals[mask]\n",
    "    plt.plot(drugX, drugY, '.', markersize = 10, c=C, alpha = alph)\n",
    "     \n",
    "# Create legend for the color corresponding to each toxic drug\n",
    "RANpatch = mpatches.Patch(color='r', label='RAN')\n",
    "TROpatch = mpatches.Patch(color='b', label='TRO')\n",
    "NEFpatch = mpatches.Patch(color='g', label='NEF')\n",
    "NIMpatch = mpatches.Patch(color='k', label='NIM')\n",
    "CLApatch = mpatches.Patch(color='m', label='CLA')\n",
    "TELpatch = mpatches.Patch(color='c', label='TEL')\n",
    "NONTOXICpatch = mpatches.Patch(color='gray', label='DMSO control and other drugs')\n",
    "\n",
    "# Set x and y limits, show resulting graph\n",
    "plt.legend(handles=[RANpatch,TROpatch,NEFpatch,NIMpatch,CLApatch,TELpatch,NONTOXICpatch])\n",
    "plt.xlim(-12,12)\n",
    "plt.ylim(-12,12)\n",
    "plt.xlabel('PC 1')\n",
    "plt.ylabel('PC2')\n",
    "plt.title('PLSR model scores (t)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (3) Create the loadings plot corresponding to (2). Interpret the results shown on the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZUAAAGHCAYAAAB4Rc+rAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzs3Xl8U2W+P/BPlrbpnu5lKUtLQZGi\nsgvKIi27WLUKjgpeHUYQfiyiCAhuwKUCA6LgKMpg3e6tqAUF2QoDjqBYtmlBLrdQoWVrS/ctbZOc\n3x/cnGnadEl6sn/er5cvycnJyfMkcL55tu8jEwRBABERkQTk9i4AERG5DgYVIiKSDIMKERFJhkGF\niIgkw6BCRESSYVAhIiLJMKgQWdmzzz6L+Ph4s14zcuRI/PnPf27xHJlMhi+++KI9RWuTw4cPQyaT\n4erVqyYfEzXEoEKSe/bZZyGTySCTyaBUKtG1a1fMnDkTRUVF4jmt3RB//vlnjBkzBmFhYVCpVOja\ntSuSkpJw5coVo2sY/vPx8UHv3r2xfv16q9aNgKFDh+LGjRvo2LGjvYtCDohBhazigQcewI0bN3D5\n8mW89957+PbbbzFt2rQ2vfb8+fNISEhAbGws0tPTcf78eXz66afo1q0bysvLjc7dtGkTbty4gXPn\nzmHevHl49dVXsWXLFmtUif6Pp6cnIiMjIZfz9kFN8W8FWYXhxtO5c2c8/PDDmD9/Pvbu3YuamppW\nX7tv3z74+flh8+bNuPvuu9G9e3eMGjUK69atQ1xcnNG5gYGBiIyMRPfu3fHCCy+gb9++2LdvX4vX\nf/PNN9GjRw98/fXXiI2NhY+PDxITE1FeXo7vvvsOvXr1gr+/P5KSklBWVia+ThAErFu3DtHR0fD0\n9ERMTAzeffddo2uXlJRgypQp8PX1RUREBJYtWwZTSSvef/993HHHHVCpVIiNjcWqVaug1Wpb/Wxa\ncuPGDUydOhVqtRre3t4YOXIkTpw4YVT+GTNmICYmBt7e3oiOjsbSpUtRW1vbpGydO3eGj48Pxo4d\ni9zcXKPnm+sOO3DgAIYPHy62Ght/D6dPn8aQIUOgUqnQs2dPfPPNN+jWrRtWrlwpnvPJJ5/gzjvv\nhEqlQkhICIYPH85uNiejtHcByD14e3tDr9e36cbZoUMHlJSUYM+ePRg/fnybri8IAg4dOoTz58+j\nZ8+erZ5/48YNpKSk4Ntvv0VJSQmSkpKQlJQEpVKJr7/+GuXl5UhKSsJ//ud/4p133gEAfPDBB1i+\nfDk2btyIUaNG4eDBg5g/fz78/f3x/PPPAwCee+45ZGVl4YcffkBERARWr16N77//HoMGDRLf+803\n38S2bdvw7rvv4p577sH58+cxc+ZMaDQarFixok31NVX/xMRE1NbWYteuXQgMDMTKlSuRkJCA7Oxs\nhIaGQhAERERE4KuvvkJERAQyMzPxwgsvwMPDA2+99RYAYOfOnViwYAHWrFmDSZMm4Z///CdeeeWV\nNpXh5ZdfxjvvvIOYmBisWLECU6ZMweXLl6FWq1FdXY0JEyZgwIAB+O2331BdXY2XXnoJBQUF4utP\nnjyJmTNn4u9//ztGjBiB8vJyHD9+3KLPg+xIIJLY9OnThdGjR4uPz507J0RHRwuDBw8WjwEQPv/8\nc5Ov1+l0wvPPPy/IZDIhODhYGDt2rJCcnCzk5uYanQdA8PLyEnx9fQWlUikAEHx8fIRff/21xfK9\n8cYbgkKhEAoLC8VjL774oiCXy4WCggLx2Ny5c4X+/fuLjzt37iy88sorRteaP3++0L17d0EQBCE7\nO1sAIOzfv198vra2VujYsaP4eVRVVQne3t7Cnj17jK6TkpIiBAYGio9HjBghPP/88y3Wo+FnmJ6e\nLgAQzp07Jz6v0WiEyMhI4a233mr2GuvXrxd69OghPh42bJjwpz/9yeichQsXCgCEvLw8QRAE4R//\n+IfJx99++634mhs3bggAhL179wqCIAhbtmwRfH19hdLSUvGc8+fPCwCEFStWCIIgCN99950QEBAg\nlJWVtVhvcmzs/iKrOHz4MPz8/ODt7Y0+ffogOjoaX331VZteK5fL8cknn+D69evYtGkTevfujY8+\n+gh33nknDh8+bHTuqlWrcObMGfzjH//AsGHDsHLlSgwePLjV9+jUqRNCQ0PFx5GRkYiMjERYWJjR\nMcMv6fLycly9ehXDhw83us6IESNw+fJlVFdX4/fffwdweyDbwNPTEwMHDhQfnzt3DjU1NXjsscfg\n5+cn/vfCCy+grKwMhYWFbfqMGjt37hxCQkLQu3dv8ZiXlxcGDx6Mc+fOicc+/vhjDB48GBEREfDz\n88OSJUuMJj/8/vvvRuUHgPvvv79NZbjnnnvEP0dGRkKhUCA/P1+87p133onAwEDxnDvuuANqtVp8\nnJCQgOjoaHTv3h1Tp07Fli1bcOvWrTZ+AuQoGFTIKgYPHowzZ87g/PnzqKmpwYEDBxAdHW3WNSIj\nI/Hkk09i/fr1+J//+R907dpV7KYxiIiIQI8ePXD//fcjLS0Nb731VpPAY4qHh4fRY5lMZvKYXq9v\ncqwhocF4idCGhN+G623fvh1nzpwR/8vKykJ2djaCg4NbvUZzGpfNUCbD8e3bt2P27NmYMmUKfvzx\nR5w+fRqvv/466uvrW71OW3h6ejY51vDza+26fn5+OHHiBNLS0tCzZ098+OGH6NGjB06ePGlRecg+\nGFTIKry9vdGjRw9069YNXl5e7b6ep6cnoqOjjfrgGwsLC8OLL76IefPmtekGb46AgAB07twZR44c\nMTr+008/oXv37vDx8cFdd90FADh27Jj4fF1dHTIyMsTHd911F1QqFXJyctCjR48m/ykUCovKd9dd\nd+HWrVtiawkAamtr8dtvv4nl+umnn3DvvffipZdeQv/+/REbG4vLly8bXad37944evSo0bHGjy3R\nu3dvnD9/3mjiw4ULF1BaWmp0nkKhwPDhw/H222/j5MmT6NChQ5tbuOQYOFBPdpObm4szZ84YHevY\nsSPS0tJw6tQpPProo4iJiUF9fT2+//577NmzB4sXL27xmnPnzsX69evx1Vdf4amnnpK0vEuWLMHC\nhQsRGxuLkSNH4tChQ/jb3/6GzZs3AwB69OiByZMnY/bs2fjoo48QERGB5ORkVFRUiNfw8/PD0qVL\nsXTpUgC3u3y0Wi2ysrJw+vRpcVKAuR588EEMGjQIf/rTn7B582YEBgZixYoV0Gg0mDVrFgCgV69e\n2Lp1K3bu3Ik+ffpg165d+O6774yus3DhQjz++OMYNGgQJkyYgJ9//hmff/65RWVq6KmnnsLrr7+O\nadOmYcWKFaipqcHChQvh7e0ttmB27tyJnJwcDB8+HGFhYTh58iTy8vKMuvTICdh3SIdcUeOBelMA\nmPxv9erVwqlTp4Tp06cLMTExgre3t6BWq4V+/foJ77//vqDT6YyuYWqw/89//rMQHR0t1NXVmXzv\nN954Q4iJiTE6tmLFCqFr165Gx1avXi106tRJfKzX64U1a9YI3bp1E5RKpdC9e3dhw4YNRq+5deuW\n8Pjjjws+Pj5CaGiosHjxYmHatGlNPo9PPvlEuPvuuwUvLy9BrVYLgwYNEj744APxeXMH6gVBEK5f\nvy5MmTJFCAwMFFQqlTB8+HAhIyNDfL6urk74y1/+IgQFBQn+/v7Ck08+Kbz//vtC49vAu+++K3Ts\n2FFQqVTC6NGjhU8//bRNA/WGxwYKhULYtm2b+PjUqVPC4MGDBU9PT6FHjx7C9u3bhbCwMGHdunWC\nIAjCkSNHhFGjRgmhoaGCl5eX0KNHD2H16tWCXq9v8XMgxyITBO78SES2d+XKFXTr1g3ff/89Hnro\nIXsXhyTCoEJENvHFF1+gU6dO6N69O65cuYJFixYhPz8fFy5ckGTcjRyDw4ypnDlzBtu2bYNer8fo\n0aORmJho9Pz+/fuxb98+yOVyqFQqvPDCC+jcubOdSktE5ioqKsIbb7yBa9euITg4GMOGDcP27dsZ\nUFyMQ7RU9Ho95s2bh2XLliEkJARLlizBvHnzjIJGdXU1fHx8AAAnTpzAvn378Nprr9mryEREZIJD\nTCm+ePEiIiMjERERAaVSiaFDhxpNwwQgBhQA0Gg0Fs+lJyIi63GI7q/i4mKEhISIj0NCQpCdnd3k\nvL1792L37t3QarV4/fXXbVlEIiJqA4cIKqZ64Ey1RMaNG4dx48bh559/xrfffos5c+Y0OSc9PR3p\n6ekAgOTkZOkLS0REzXKIoBISEmK0gVNRURGCgoKaPX/o0KH4+OOPTT4XHx9vtMve9evXpSuogwkN\nDXXp3Eisn3Nz5fq5ct0AtGsDNocYU4mJicGNGzdQUFAArVaLY8eOYcCAAUbn3LhxQ/zzqVOn0KFD\nB1sXk4iIWuEQLRWFQoHnnnsOq1atgl6vx6hRoxAVFYXU1FTExMRgwIAB2Lt3L7KysqBQKODn54fZ\ns2fbu9hERNSIQ0wptiZ2fzkv1s+5uXL9XLluQPu6vxyipUJE9iUIAjQaDfR6vWTT9fPz85tsVewq\nXKFugiCIi8mlXKLBoEJE0Gg08PDwgFIp3S1BqVRanMrf0blK3bRaLTQaDby9vSW7pkMM1BORfen1\nekkDCjkHpVLZZCO69mJQISJmqHBjUn/3DCpE5BBqamrw2GOPQafTAbi9sdedd96JadOmGZ03a9Ys\n5OTkWKUMa9asQXx8PBISEvDkk0/i5s2bAIDy8nJMnz4d8fHxGDVqFP7rv/6rzdd89tln8eCDD4qP\nk5KS8K9//UvysjsKBhUicgipqakYP368OFYxc+ZMbNy4scl506ZNw9/+9jerlGHWrFlIT0/HgQMH\nEB8fjw0bNgAAPv30U/Ts2RPp6en45ptv8Oabb6Kurq7V6/3444/w9fU1uxxardbs1zgKBhUiMpsi\nNxfqOXMQkpQE9Zw5UOTmtvua3333HcaOHSs+fuCBB+Dn59fkvMGDB+Of//ynyRvv4MGDsWrVKkyc\nOBETJ07EH3/8YfK9YmNj8dZbb2Hs2LF44oknxIwe/v7+4jnV1dVi15BMJkNlZSUEQUBVVRXUanWr\nY1BVVVXYsmUL5s2b1+S5Xbt2YeLEibj//vtx/PhxALeD6l/+8hdMnz4dTz75ZIvXdmQMKkRkFkVu\nLoKnToVPWhq8fvkFPmlpCJ46tV2Bpa6uDrm5uYiKimr1XLlcjm7duuH33383+byfnx92796NZ599\nFm+88YbJc6qrqxEXF4d9+/bhvvvuw/r168XnkpOTMWDAAKSlpeGVV14BAPzHf/wHsrOz0a9fP4we\nPRorV66EXN7y7XPNmjV44YUXTM6s0mq12L17N9566y2j9z558iTeffddbN++vdXPwVExqBCRWfzX\nrIHHlStGxzyuXIH/mjUWX7O4uBgBAQFtPj80NFQc72jMsMFfYmIiTp48afIcuVyOyZMnAwAeffRR\n/Pbbb+JzixcvxokTJ/DII49g27ZtAIDDhw/jrrvuwqlTp7B//34sWbIEFRUVzZbv7NmzuHz5MsaP\nH2/y+QkTJgAA+vbti6tXr4rHhw8f3mLeQ2fAoEJEZlE0czNX5OdbfE2VSmXWYsLa2lqoVCqTzzWc\nzSSTyaDT6ZCQkICEhASsXbu21dcYPPLII/jxxx8B3O6amjBhAmQyGbp3744uXbrg4sWLzZbv5MmT\nyMrKwuDBg5GYmIicnBwkJSWJz3t6egK4naKqYTdew32jnBWDChGZRRcZafp4RITF11Sr1dDpdNBo\nNG06PycnB7169TL53Pfffy/+v3///lAoFDhw4AAOHDggdmfp9Xrs3r0bAJCWloZBgwaJ1zXYv38/\nYmJiAACdOnXCzz//DAAoLCzEpUuX0LVrVwC3WxeNTZ8+HadOncLx48exY8cOREdH45tvvmlT3Zwd\nVzsRkVkqFi2Cx6lTRl1g9V27omLRonZdd8SIEfjtt9/Em/QjjzyCixcvorq6Gv3798df//pXjBw5\nEoWFhVCpVIhoJojV1dVh0qRJ0Ov12Lx5s8lzfHx8cOHCBYwbNw7+/v748MMPAQCrV6/GpUuXIJfL\n0alTJ3FPpvnz52PBggUYPXo0BEHA8uXLERwcjOLiYpP7QbkzJpR0Yq6e1I71s53q6mqzul4Uubnw\nX7MGivx86CIiULFoEXRduhido1QqzZoae/bsWXz00Ud4//33Wzxvy5Yt8Pf3NzlDavDgwdizZw+C\ng4NbvEZsbKzJ3WXbylC3AwcOIDc3F88//7zF17I3U989E0oSkU3punRB6aZNkl6zT58+GDZsGHQ6\nXYt5tQIDA/HYY49J+t6WSkhIsHcRHA5bKk7MkX7pWoM71U+j0SAvLw8ajQYqlQpRUVHNDkRbg7kt\nlbYwt6XiTFypbmypELkYjUaDzMxMyGQyyOVyaDQalJSUoG/fvjYNLERS4OwvIjvLy8sTAwpwew2F\nTCZDXl6enUtGZD4GFSI702g0TVZnG1osRM6GQYXIzlQqVZM9LfR6Pbu+yCkxqBDZWVRUFARBEAOL\nXq+HIAhtyoPlShqmvj979iweeughjBo1CvHx8di5c6d4nhSp7wcPHozi4mLx8bFjx8QU+4WFhZg2\nbRri4+MxcuRIPPPMMwBud1PGxMQgISEBDzzwAF599VXo9foWy/rII4+Iq/n79euH5557rk3lq6io\nQP/+/fHaa6+Jx2JjY9tVZ1vhQD2RnalUKvTt29eus78cQcPU997e3ti4cSOio6Nx8+ZNjB8/HiNH\njkRgYKCY+r65lCvttXbtWgwfPhx//vOfAcAocWXXrl1x4MABALdzhu3duxe9evVqtqxpaWnia2fM\nmIExY8a0uQxDhgwxu+xardbuO3iypULkAFQqFWJjYxEXF4fY2FiHDyi5uQrMmaNGUlII5sxRIze3\n/fu1N0x9HxMTg+joaABAZGQkQkJCxPT0UqS+b0lBQQE6dOggPu7du3eTc5RKJQYMGIDLly+3WFaD\nyspKHD16FOPGjWv1/TMzM1FYWGgy/UtycjLi4+MxadIkFBYWAri92v/NN99EUlISVq1aZVZdrYFB\nhYjMkpurwNSpwUhL88Evv3ghLc0HU6cGtyuwtJT6/vTp06ivr0e3bt0ASJP6HgAef/xxsWvKkBMM\nuL1T48svv4ykpCRs3LjRZDbk6upq/Pzzz7jjjjtaLKvBnj17MGzYMKP9WkzR6/V4++23sWzZMpPv\n2a9fP6Snp2PIkCH48ssvxedycnKQmpraYn1thUGFiMyyZo0/rlzxMDp25YoH1qxp+YbZkuZS3+fn\n52Pu3LlYv3690Qy59qa+B4Dt27eLiSYbdqWNHDkSx44dw1NPPYWLFy9i7NixYsvjypUrSEhIwEMP\nPYTRo0cbbRPcXFkBYOfOnWK5WpKSkoIHH3wQnTp1avKcp6enuII/Li7OKGX+pEmTWsxCYEscUyEi\ns9y8afrmlZ9v+U3NVOr7iooKTJs2DYsWLUL//v2NnjM39b2h22nMmDFGrZLmBAUF4ZFHHsEjjzyC\nadOm4ddff0Xfvn3FMZXGK+pbKmtxcTFOnz6NTz75pNX3PXnyJI4fP46UlBRUVVWhvr4evr6+WLp0\nKZRKpVg3R06Zz6BCRGaJjNSZPB4RYfp4WzRMfa9SqVBXV4fnn38eSUlJeOihh5qc31rq+zlz5jRJ\nfd9WP//8M/r37w9vb29UVlbiypUrJlsOBq2VddeuXYiPjzcKgqdPn8a2bdvw3nvvGZ27qUE+tdTU\nVGRmZmLp0qVtLrsjYFAhIrMsWlSBU6c8jLrAunatx6JFze+E2BYNU9//8MMPOH78OEpKSvD1118D\nADZs2IA+ffpIkvq+JVlZWVi2bBmUSiX0ej2efPJJ3HPPPc1mOGiprMDtIDd79myj11y7ds3hJ2NY\nigklnZg7JVx0RY5UP3MTSubmKrBmjT/y8xWIiNBh0aIKdOli3FJx5NT37dXehJIrVqzAY489ZnJm\nma0xoSQRtcgWGY+7dNFh06ZSSa/pjKnvLbV8+XJ7F8Fq2FJxYo70S9caWD/zNc54bFid31rGY6a+\nN48r1Y0tFSIbsvc+J+YyZDzW6/UoKSmBVquFQqFATk6OQ3S1kOvjOhWiZhh+9ZeWlqKurg6lpaXI\nzMx06OzBGo0Ger0e+fn50Gg00Ol0qK2txR9//OHQ5SbXwaBC1Axn3OdEpVKhtPT2WEfD9RpKpdKh\ny02ug0GFqBnOuM9JVFSUUV+/Ycg0MDDQoctNroNBhagZUu9zotFokJ2djaysLGRnZ6OmpkaKYhpR\nqVTo3r07vLy8oFAooFKpEB4eLv7ZkTVMfX/16lWMGzcOCQkJGDVqFD777DPxvClTpoitsfbYs2cP\nOnXqhIsXL4rHGqbAb+jYsWPIyMho9ZrNvb6hs2fP4uDBg+YX2EkwqJBdNL7BOuKvaCn3OTE1PvPr\nr79apd7R0dEICgpCWFgYQkJCoFAonGJ/loap78PDw7Fz504cOHAAu3btwubNm8VcX4899hhSUlLa\n/X47duzAoEGDjPY/ac4vv/zSYh4xc5w7dw6HDh2S5FqOiEGFbM5ZBsAN+5yo1Wp4enpCrVa3OjW3\nOabGZ+RyuVXGOaQsd3Nyy3Mx59AcJO1KwpxDc5BbntvuazZMfe/p6QkvLy8At/N8NWwxjhkzptlA\nEBsbi7feegtjx47FE0880SQFvUFVVRVOnDiBdevWNXutM2fOYMyYMbhy5Qo+//xzfPzxx0hISMDx\n48fbVJ/Tp09j8uTJGDNmDCZPnoyLFy+irq4O69atw/fff4+EhATs3LkT1dXVeOmllzBhwgSMGTMG\n+/btM1neJ554AmPHjsXo0aPFc1atWoVPP/1UPO+vf/0rPvzwQ+j1eixZsgSjRo3CtGnT8Mwzz2DX\nrl1tKnd7MaiQzTnTALhU+5zYenym4fTnhtOipZBbnoupe6Yi7VIafrnxC9IupWHqnqntCiymUt9f\nu3YN8fHxGDhwIGbPno3IyEgAt/OE1dbWGu3caFBdXY24uDjs27cP9913H9avX2/y/fbu3YuRI0ci\nJiYGarUaWVlZRs9nZGRg8eLF2LZtG7p27YpnnnkGM2bMwIEDBzB48OA21alHjx747rvvsH//frz8\n8st455134OnpiZdffhmTJ0/GgQMH8PDDD2Pjxo0YNmwYfvzxR2zfvh0rVqxAdXW10bW8vLywdetW\n7Nu3D9u3b8fbb78NQRDw8MMP44cffhDP++GHH/DQQw/hxx9/xNWrV3Hw4EGsW7dOslZWW3CdCtmc\nrW6wjrTGxHBzb1hva+5D33gRpEajQUlJiSQtljUn1uBK+RWjY1fKr2DNiTXY9OCmZl7VMlOp7zt1\n6oT09HTcvHkTzz//PCZOnIiwsDAAtxeO5ufnN0nHIpfLMXnyZAC3d2Y07N7Y2I4dOzBjxgwAwMMP\nP4wdO3YgLi4OAHDx4kW8+uqr+Oqrr8RAZony8nLMnz8ff/zxB2QyGerr602e99NPP+HAgQP48MMP\nAdxumV27ds1o+2BBEJCcnIzjx49DJpPh5s2bKCwsRJ8+fXDr1i3cvHkTRUVFCAwMRKdOnfDRRx9h\n0qRJkMvlCA8Px9ChQy2uh7kYVMjmbHGDteZN1RJRUVEoKSmBXq8XV7rr9XqrjXOYag3q9Xrk5eW1\ne6/zm9Wm9zHJr863+JqmUt8bREZGomfPnjh+/DgmTZoEoOXU9w3JZDJcu3YNzz77LADgmWeewaRJ\nk3Ds2DFcuHBBTI0vk8nEjbHCw8NRW1uLs2fPtiuorF27FkOHDsXWrVuRl5eHpKQkk+cJgoAtW7ag\nR48ezV7ru+++Q1FREfbs2QMPDw8MHjxY/LwmTpyI3bt3o6CgAA8//LDF5ZUKu7/I5qQcAG+Oo3Wx\nmRrnGDJkiFVbKtZqDUb6mL7RRviYzhrcFg1T3wO30ysZZseVlpYiIyMDMTExAG7fhAsLC03+fdHr\n9di9ezcAIC0tDYMGDUKnTp3EzbimTZuG3bt347HHHsNvv/2G48eP48SJE+jSpQt+++03AEBAQAA+\n++wzJCcn49ixYwAAX19fVFZWiu/z448/YvXq1S3WqaKiQgxKhuzFwO2dKRtea8SIEdi2bZs4/fvs\n2bMmrxUaGgoPDw8cPXrUaIOuhx9+GDt37sTu3bsxceJEAMDAgQOxe/du6PV6FBYW4pdffmmxrFJi\nUCGbs8VAsiOuMWk8PuPt7W3V95JyOnRDiwYsQteArkbHugZ0xaIBi9p1XUPqe+B2F9RDDz2E+Ph4\nJCUlYebMmbjzzjsB3N7DvV+/flAqm3a0+Pj44MKFCxg3bhyOHj2KBQsWNDln586dGD9+vNGxCRMm\nIC0tTXwcFhaGlJQUvPbaazh16hQSEhKwd+9ecaD+8uXL8PPza7E+s2bNwurVq/Hwww9Dp/t3Bueh\nQ4ciOztbHKifP38+6uvrER8fjwcffBBr1qxpcq1HH30U//rXvzB+/HikpaUZtWp69eqFqqoqREZG\nitsBTJw4ER06dMCDDz6IV199Fffee6/JnTWtgQklnRgTLjYvOzsbpaWlTbrY1Gp1u7t/pGJJ/do6\nTmRuYkmzU9+X52LNiTXIr85HhE8EFg1YhC4BXYzOsVbq+9dffx0JCQl44IEHmjwXGxuL7OzsNr+n\npebOnYs33ngDISEhVn8vS1VVVcHX1xfFxcWYNGkSduzYgfDw8CbnMaEkURuYGsNwhrUaLTFnnMjQ\nGrTWRIUuAV0sHpRvTltT3/fq1ctkQLGlDz74wOGzFE+fPh1lZWWor6/HvHnzTAYUa2BLxYmxpdIy\nR5r9ZYq59bNm64up783jSnVjS4WojQxjGNZi66DliONERI05TFA5c+YMtm3bBr1ej9GjRyMxMdHo\n+V27duHgwYNQKBQICAjArFmzxDnrRLZmjynLtl7rQmQJh5j9pdfrsXXrVixduhQbNmxoMmUOALp1\n64bk5GSsW7cOQ4YMwRdffGGn0hLZZ8qyLaZiE7WXQwSVixcvitPhlEolhg4d2iQjaJ8+fcRcQLGx\nsSZTNBDZij26omwxFZuovRyi+6u4uNhoal5ISEiL0wIPHTqEe+65x+Rz6enpSE9PBwAkJycjNDRU\n2sI6EKVSyfrZSVhYGIqKipqJQlQkAAAgAElEQVR0RYWEhIhlrqmpwaVLl8SB0JiYGKO1KZbWr3Pn\nzu2vQCP5+fkm1320lznXrKmpwZNPPolvv/1WnP1VUVGB+++/HxMmTBAXGyYlJeGTTz6BWq2WvLyT\nJ08WFybeunUL9957L1JSUiAIAl577TUcPHgQ3t7eeO+999C3b98mr9+wYQPS0tLEhKFr165F//79\nIQgCVq9ejR9++AEKhQLTp0/HjBkz8N///d/417/+hdWrV0Ov12PevHmQy+V49913jTZZM+WDDz7A\nW2+9hd9//x0hISFYu3YtfH198eKLL5pVZy8vL0n/nTlEUDE1Aa25D/Snn35CTk4O3nzzTZPPx8fH\nIz4+XnzM2VHOy5Hrp1arkZub22QdSExMDG7dutVkzKWoqAi5ublGLQtHql9tbW2L03gtYe4MqS+/\n/BLjxo2DIAji61avXo0hQ4ZAr9eLxx599FFs3boV8+bNk7S8wO10KAYzZszAmDFjoNVqcfDgQeTk\n5ODnn3/GqVOnsGjRoiZZf0+cOIH9+/djz5498PLyQnFxMerq6qDVapGamoqrV6/iyJEjkMvluHXr\nFrRaLXQ6HfR6Perr6/Hqq6+irq4O77//vtFiSVOuXbuGw4cPo1OnTtDpdNBqtWLqn5Y+c0EQIAiC\n0Y+h2traJn8P2zP7yyG6v0JCQoxSVBcVFSEoKKjJeZmZmUhLS8OiRYvg4eFhyyISGWmtK8reaWKs\nvV9Nbm4u5syZg6SkJMyZMwe5udKmvgdu/3svLCzE8OHDjc5rb+r7vLw8DB8+HPPmzUN8fDxmzJjR\nZMO0yspKHD16FOPGjQMA7Nu3D0lJSZDJZOjfvz/Ky8uRn2+c66ygoADBwcFiN31wcLCYpuWzzz7D\nggULxL8PjVsGr7/+OkpKSrBx48Ym3aqmvPnmm3jttdea/Pj+3//9XyQlJeG+++7D1q1bxfqOGDEC\nS5YswdixY62+zMIhgkpMTAxu3LiBgoICaLVaHDt2DAMGDDA6548//sDHH3+MRYsWITAw0E4lJfq3\nltLi23P6r7X3q8nNzcXUqVORlpaGX375BWlpaZg6dWq7Akvj1Pd6vR5vv/22mOSxISlS31+6dAlP\nP/000tPT4e/v32TTrz179mDYsGHw9/cHANy8edPo13uHDh3ETcMMRowYgevXr+P+++/HkiVLjPJt\nXb58Gd9//z3Gjx+Pp59+Gjk5OeJzO3bsQGZmJj744IM2dRfu378fHTp0wF133dXkuYsXL+LLL7/E\n7t27sX79ejEz8qVLl5CUlIT9+/dbpfu0IYcIKgqFAs899xxWrVqFBQsW4L777kNUVBRSU1Nx4sQJ\nAMAXX3wBjUaD9evX45VXXsE777xj51ITNc/c3FtStiys3Upas2YNrlxplPr+yhWTOavaqnHq+5SU\nFDz44IPo1KmTyfMNqe8ba5z63pBLrLGOHTti4MCBzZ63c+dOo2UNbemi9/X1xd69e7FmzRqEhIRg\n1qxZSE1NBXA7aHp5eWHPnj3405/+hIULF4qv69OnD65evYozZ86YLGtDNTU1eO+99/Dyyy+bfH70\n6NHw8vJCcHAwQkNDUVhYCOD2OFz//v1bvb4UHGJMBQD69euHfv36GR2bMmWK+Ofly5fbukhEFjMn\nTYzUa16s3Upq/AvdwNRNvq0ap74/efIkjh8/jpSUFFRVVaG+vh6+vr5YunQpgPalvh81alSTgNDw\ncXFxMU6fPo1PPvlEPNahQwejbqMbN26IyRsbUigUGDp0KIYOHYo77rgD27dvx5QpU9ChQwcxg/D4\n8ePx0ksvia/p0aMHXn75ZcycORNfffUVevXq1Wx9Ll++jNzcXCQkJIjlGDt2rJiZ2dD1ZiiLYWxG\n6mwJLXGIlgqRqzFn+q/ULQtrZigG0OweI6Zusm3VOPX9pk2bkJGRgePHj2P58uVISkoSA0p7U98D\ntwe6Db0gO3fuFFstwO2F1vHx8Uaf15gxY/DNN99AEAScPHkS/v7+Tep78eJFo26tc+fOiV1NhqzJ\nwO397qOjo41eO3DgQCQnJ2PatGm4du0agNtJK0+fPm103p133onMzEwcP34cx48fR4cOHbBv3z6b\n5fVqC4dpqRC5mramiZG6ZWHtZJqLFi3CqVOnjLrAunbtikWLpEl933hgvrG2pr739/cXd1NsLDY2\nFtu3b8fixYvRvXt3TJ8+XXzu+++/x+zZs43OHz16NA4dOoRhw4bB29sbGzdubHLN6upqLFu2DOXl\n5VAqlejWrZvYJTh79mzMmTMHH3/8MXx8fLB27domr09ISEBxcTGeeuopfPfddzh//rxDBYu2YkJJ\nJ+ZIU1KtwV3qZ41EkebmJTM79X1uLtasWYP8/HxERERg0aJF6NLFOVLf5+XlYfr06Th06FCby9aY\ntRNKVlRUYOHChdiyZYvV3sOACSWJXIhGo0F1dTUuX74MAPD390dgYCAUCkW7WhbWTqbZpUsXbNrk\nvqnvrc3f398mAcUa2FJxYu7yS95V+fr64sCBAygsLIQgCKitrYVOp4NarcawYcNsOnWeqe/N40p1\nY0uFHIqj71niyC5duoSKigpxkN7HxweCIEChUKCgoIDrscgpMaiQxTQaDU6dOoWKigqxy6KwsBD9\n+vWzWWCxV1CT4n2rq6uh0+mMprPKZDKjWVC24uIdFtQCqb97Tikmi+Xk5KCwsFDstqmtrUVhYaHR\ntEprsvbKcWu/r4+PDxQKhdE/akNLxdatPblc7jLdOdR2Wq22TWlhzMGWClns5s2bkMlk4i9tw/9v\n3ryJ3r17W/39G6/v0Ol0KCsrw7FjxxAVFWW1VoupdSV6vR55eXlmDY7HxMQgJyfHKBgJggB/f3+b\n75Fi2ACstra21ey4beXl5WW0oNGVuELdDIklpf43wqBCktLpdCgvL0dWVpbVu6Maru+or69HQUGB\nWIbS0lKr7cTYeF1JfX09ysvLUVJSAgBtrrO3tzf69euHnJwccZV6ZGQkoqOjbd5SkclkRmn5peDK\nEy1cuW7txe4vslhkZKSYShu43ZSurq6Gl5eXTbqjGq4cLy8vF48rlUqrZgVu+L6GYGbIcttSnRvn\n9zK8xsPDA2FhYYiKirJLQCGSEoMKWSw6OhphYWHw8vKCQqGAXq+Hj48PgoODAVg/3XvD7XUbjgcY\nZk1ZKytww/ctLy+HIAiQyWTw9fVFSUkJCgsLkZGRYfTepsZh/vnPf+LUqVM2HxMisiYGFbKYSqVC\nv379EB0djaioKAQFBaFjx45G6TOsme69YX4tlUoFLy8vcUtqQNp8V829L3C7G8uwJ1B1dTWqqqpw\n/fp1HD58GGVlZQBMj8OUlZWhoqLCbnuuEFkDx1SoXRqu3DakG2nIWjf2xu8fFRUlZvo1vK+U+a4a\najid2NvbG0qlEhUVFdDr9aiuroYgCFAqlaitrcUvv/yCkSNHmszvpdPpmuzwJ0UQ5tohsicGFZJM\nc4kMw8PDxT1CrHWTM7QerH0zNXRj6XQ6VFRUoLa2FpWVlVCpVKivrxfHl7y8vCCXy6HT6ZCXlyfO\nrmoYWBQKRZN0JO0NwlKn0ScyF4MKScbUjT08PBwXLlywyU3O2vmugNvdWDqdTtz8SCaTQaVSoaam\nBjKZDEqlUhxjEgQBHh4e0Gg0iI2NbRJwAwMDodFoJM0mLNV0ZyJLMaiQpBrf2LOzs13qJqfRaFBR\nUQHg3+tylEol/P39UVtbCw8PD8jlcrHF4u/vD5VKZTLg3nPPPSgqKpK0dWXPbYyJAAYVsjJXu8kZ\nurkaLhAUBAEqlQqRkZEoKiqCTqeDh4cH/P39jbINNw643t7ekreuTHWz6fV6KBQKq3dBEgEMKmRl\nzd3knPWGFhUVhUuXLonpLRq2SNRqNeLi4pq0PADY7IZualyrvr4epaWlYiuK4yxkTZxSTFbVcE0H\nYN1ZWbagUqlw3333iQPxKpUKYWFhYovE0PKIi4sTWyC2zE/WcLqzTCaDRqNBVVWVmPQT4NRlsi62\nVMiqbDUry5YCAwMxcuTINtWppYFzw/7lUjJMJ66srBTT59fX10Or1aKgoADh4eFGLRYiqTGokNXZ\nYlaWNbS03sNe+8+39l6G6cQlJSVi1mgPDw/xnPLycoSEhDh1FyQ5NgYVchvmLAqUar2HLceUGraK\nGo75NJxUoNVqnb4Lkhwbx1TILZi7B4qpbitLxiFsOabUMHgplUoxoOj1ekRERMDLywsqlQpqtZqD\n9GQ1bKmQW2gYJAyp6uvr65GRkYGBAwc2ucFK1W1lyzGlhq2ihgsrDZMKgoKCGEzI6hhUyC0YbrYN\n912RyWQoLy9HZmZmk5utlN1WthpTajidWKlUIiwsDGVlZQgNDRU3/mJAIWtjUCG3YAgShn1XZDKZ\nmEbF0K3V8MbfXB4zRx6HaNwqCggIwL333stAQjbFoEJuwRAkDKvhDYsWAwMDTXZrOetUaGedaUeu\ng0GF2sVZ0qwbgkRGRgbKy8vh4eGBwMBAKJXKZru1eIMmMh+DClnM2dKsq1QqDBw40KjMztCtReRM\nGFTIYs6YZt1Zu7Wa4ywtRXIfDCpkMUun3dr7Rugq3VrO1lIk98CgQhazZNqtNW6E9g5SttSwrqWl\npVAqlfD09ARgm5aiO33WZBkGFbKYJdNupe4yc6df643rWl5eDp1OJyaJBJq2FKUMAu70WZPlmKaF\nLNYwzbqnp2eb0n9InWCxPelUNBoNsrOzkZWVJe534sga19XDwwOCIIhrbwDjlqK5qWnMfX+m0CdT\n2FKhdjF3fELqBIvtGddxtl/djetqSMVSX18PoGleMWu0Cl1pF0+yDgYVsimpV6qrVCpUVlaioqIC\nWq1W3C8+ICDA5PmG7qC8vDzU19dDrVZDLpc7zcy1xkkjw8LCoNVq4enp2aR7S+og4Gq7eJJ1MKiQ\nTUk9pTc8PBznzp0zShZZXV2N3r17Nzm3YetEo9FAq9UiPz8fERERUCqVDv+r21RAVigUzaZikToI\nOEvqGm12NrxWroSyoADa8HDULlsGpYP+UHBFDCpkc1JO6S0oKEBERITYUvHy8oK/v7+462FDDbuD\nlEoltFotAKCsrMwpNq4yNyBbo1Xo6Gt8tNnZCJ4yBX75+eKxyqwsFKemMrDYCIMKOTWNRgNPT0+E\nhIQ0OW7qXMOv9oCAAPEcZ9q4ypyAbI0g4OhrfLxWrjQKKADgl5+PqpUroUtJsVOp3AuDCjk1c7p4\nGp7r4eGB8PBwlJWVwcPDA2q12uF+dUvB0YOA1JT/t61Bk+OFhdDZuCzuikGFbErqxXPmdPE0Pleh\nUHDjKhejDQ83fTwszMYlcV9cp0I2I/W6CcC8tTKWrKsh51K7bBkqIyKMjlVGRKB22TI7lcj9sKVC\nNmOtBJTmjjO4U3eQu1HGxqI4NRVVK1dCWVgIbVgYZ3/ZGIMK2UxFRQVKSkrE9SQBAQHw8PBw6Gm8\n5HyUsbHQpaSIYyi8ydmWw3zeZ86cwbZt26DX6zF69GgkJiYaPf/7778jJSUFV65cwfz58zFkyBA7\nlZQsodFoUFBQgNraWsjlcmi1Wmg0GoSFhTW7UNHc6zvyVFeyLf59sB+HGFPR6/XYunUrli5dig0b\nNuDo0aO4evWq0TmhoaF48cUXcf/999uplNQeeXl5CAwMFLfyNfy/rKys3dN4rTFWQ85Jo9Hg999/\nx8GDB5GTk4Oqqir+fbAxhwgqFy9eRGRkpLiyeejQocjIyDA6Jzw8HF27doVMJrNTKak9DOtJIiIi\noFKpoFAo4O3tLT5uDyY6JODfPy7y8vKg0+lQW1uLgoIC6HQ6/n2wIYfo/iouLjZavBYSEoLs7GyL\nrpWeno709HQAQHJyMkJDQyUpoyNSKpWS1q+mpgaXLl1CdXU1fHx8EBMTA29vb0muHRYWhqKiIsjl\ncrG7S6/XIyQkpNk6tLV+OTk58PPzEx/X19ejpKQEVVVV8Pf3l7QeUpL6+7OX5v7e2Lp+Z8+eha+v\nL8rLy8U9ZgRBQG1tLcLDw6FQKCQrj6t8d9bgEEFFEIQmxyxtkcTHxyM+Pl58fOvWLYvL5ehCQ0Ml\nq1/jrL1FRUXIzc2VbMqtWq1Gbm5uk73hY2Jimq1DW+un0+lQWVkpjtXk5+dDEAR4e3sjLy9P0npI\nScrvz15a+nvTuXNnm9avsLAQdXV10Ov1qKurE+8hVVVVqKyshFKplKw8rvDdtaRjx44Wv9Yhur9C\nQkJQVFQkPi4qKkJQUJAdS+R+rN2FZM01IlFRURAEAXq9HmVlZeKYTUBAALvCrMyRuh5VKhX0er2Y\n800QBAiCAIVC4RQpeFyFQ7RUYmJicOPGDRQUFCA4OBjHjh3D3Llz7V0styJ1mvTmZt9YY41IwxxX\nJSUl8Pb2FqcrA9zzw5ocaY8VQ8YEuVyOiIgIlJaWQqvVIioqCtHR0Q7XUnVVDhFUFAoFnnvuOaxa\ntQp6vR6jRo1CVFQUUlNTERMTgwEDBuDixYtYt24dqqqqcPLkSXz99ddYv369vYvuMizdb95U4LDH\nBlgNA1ZpaSn3/LARR9pjpXECzeDgYE4ltgOZYGpAw4Vcv37d3kWwGmuOqRjGPJoLBC2dn5eXZ/LG\nrlarzWqpWFI/c+thT67QL9/S523rMRVbcoXvriXtGVNxiJYK2Z+5adJbSrli7S6Rlha2OcOeH+Zw\n9EV85nzejl4XkgaDConMGfNoKXBYs0ukLV1rrpLfyx7diJZoy+ftLHWh9nOI2V/kfAwzbRoyBI6G\ns7EMx6WafeNIs42sTcq6ajQaZGdnIysrC9nZ2TYfSHen783dsaVCFmlpHxNrdkE50mwja5Oqro7Q\nSmhYF61Wi7KyMmi1WlRUVJj1d4NdaI6PQYUs0lrgsOb0YUeZbWRtUtXVWlsOmMNQF71ej/wG2/3W\n19cjMzOzTQHOEYIjtY7dX2QxQ+CIi4tDbGysTf5hW7NrzdFIVVdHaN0Z6lJaWmp03JBktC3dYOxC\ncw4MKuRU3Gn3Rqnq2tL4l60Y6uLh4QGlUgmVSoXw8HB4eHi0OcA5QnCk1rH7i5yOq8zuagsp6trc\n+Fd4eLg4aG+L8QnDe1i6ONWduj6dGYMKkZ1Ze/DZ1PhXeHg4Lly4YPPxiZYmeFjztWQ7DCpEdmSr\nwefGLZ7s7Gy7DN63Z2agqy1sdVUMKkR2ZK+ZWfYcn2hPl547dX06Kw7UE9mRvW7ujjB4T66JLRU3\nxUVkjsFeg88cnyBrYVBxQ1xE5jjsdXOXcnyCP1CoIQYVN+QIK6zpNnsOPksxPtHSDxRyTwwqboiL\nyByLMw8+t/QDpXPnznYuHdkDg4obMvTj63Q6lJeXQ6vVQqFQsD+dzMYfKNQYZ3+5oaioKNTX1yM/\nPx8ajQZarRYajQalpaW8GZBZOIuMGmNLxQ2pVCqo1WpUVFRAp9NBqVQiMDAQcrmc4ypkFkedRcbJ\nA/bDoOKmdDodQkNDmxxnS4XM4Yir3Dm70b4YVNxUW9dH8BcftcbRJhpwdqN9cUzFTbVlrw7DL77S\n0lLU1dWhtLQUmZmZbM2QQ+PkAftiS8UFtaV10ZZuC/7ik17D7yYsLAxqtZotP4kxRb59Mai4GHP6\nk1vrtuAvPmk1/m6KioqQm5vLvn6JtWfyQHa2FitXeqGgQInwcC2WLatFbCxvk+bgp+VipGxd8Bef\ntFraDpctP+lYOnkgO1uLKVOCkZ/vJx7LyqpEamoxA4sZ+Em5GClbF446XdRZseVnO5ZMHli50sso\noABAfr4fVq6sQkqKTsriuTQGFRcjZevCEaeLNscZZqmx5efYCgpM3w4LC5UAGFTaikHFxUjdunC0\n6aKmOMu6BLb8HFt4uNbk8bAw08fJNE4pdjGG1oVarRZvsEqlUvwV74paGqtwJI2/m+rqapf/bpzJ\nsmW1iIioNDoWEVGJZctq7VQi58Sg4oIM3T/19fVQqVQQBMGl15g401hFw+/Gx8fH5b8bZxIbq0Rq\najHi4/Nx991FiI/P5yC9BfhpuShnXWNiyToOZxurcNbvxh3Exir/b1DeMIbCW6S5+Im5qIY32fr6\nejHFfUVFhUMOYgOWr+NwtrEKZ2pZ2ZIzTLag1jGouCiVSoXKykqUlpaitLQUcrkcnp6eUCgUyMzM\ndLhBbMDydRzONEsN+HfLqiFbtqwc8ebtLJMtqHUMKi4qPDwc586dg0ajgSAI0Gq10Gq1CA8Pb3Kj\ndpSbTHt+wTvDLDWDhi0rwHTeNWtx1Js3uwRdBwfqXVRBQQEiIiKgVCohl8vh4eEBX19fVFVVGd2o\nHSlppLts+GRoWYWEhMDT0xNqtdpmN3VHnSnHLkHXwZaKi9JoNPD09ERAQAA0Gg1kMhkAQKvVGt2o\nHekXorONjbSHSqVCnz59cOvWLZu+r6PevJ1tsgU1jy0VF2X41R8YGAgAEAQBgiBAoVAY3agd6SbT\ncB2Hp6cnQkJC7N4t42octTXYlq0YyDmwpeKiDL/65XI5IiIiUFpaiqtVV7G3ai8qiisQcSMCy4Yu\ns/gXYnZ2NlauXImCggKEh4dj2bJlkrRsGo6NhIaG2vyXvKtz1Nags022oOYxqLioxv9IK5WV2Hxj\nM/Lr8wEAWZVZyPoxC5/Hfw6hRDDrJpOdnY0pU6YgPz9fPJaVlYXU1FQOqjo4R755O9NkC2oeu79c\nmOEfaVxcHD67+pkYUAzy6/Kx5sQaoy6ntgwar1y50iigAEB+fj5WrlxplXqQtBr+vYiNjXWIgEKu\ngy0VN1FQU2DyeKGm0OxfiAUFzVyrsNCishGR62BLxU2Ee4ebPB6mCjP/WuHNXCvM/GsRkWtpNaho\nNBp88skneOWVV7Bx40bcvHnT6PmFCxdarXAknWVDlyHCM8LoWJgiDFPDpyI7O9us2V7Lli1DRITx\ntSIiIrBs2TJJykpEzqvVoPLZZ5+hsLAQjz/+OAIDA7F06VKcO3dOfJ5dHs4hNiwWqRNSER8ejzi/\nOAz2GYw3o99EuGe42QseY2NjkZqaivj4eNx9992Ij4/nID0RAWjDmMrJkyexYcMG+Pj4YNCgQejX\nrx82bNiAF198Ef369bNFGUkisWGxSHk4BdnZ2WI+MMCyBY+xsbFISUmxZnFb5SjpZci6+D07l1aD\nSl1dHZTKf5/Wt29fLFq0CGvXrsVzzz0nrtRurzNnzmDbtm3Q6/UYPXo0EhMTjZ6vr6/Hpk2bkJOT\nA39/f8yfP7/Zvn1qmSMteLSUo+awImnxe3Y+rXZ/RUVF4fz580bHevbsiaVLl+Lvf/87amvbvyua\nXq/H1q1bsXTpUmzYsAFHjx7F1atXjc45dOgQfH198f7772PixIn48ssv2/2+7spRV1Wbw1FzWJG0\n+D07n1aDSmJiIioqKpoc7969O5YvX47hw4e3uxAXL15EZGSkmABx6NChyMjIMDrnxIkTGDlyJABg\nyJAhOHv2LARBaPd7uyNXSInhCq0tah2/Z+fTavdXS+MmXbp0wYsvvtjuQhQXFyMkJER8HBISguzs\n7GbPUSgU8PHxQUVFBQICAtr9/u7GkVdVtxUTELoHfs/Op00D9SdPnsRf/vKXJs9t2bIFAwcOxL33\n3tuuQphqcTQeq2nLOQCQnp6O9PR0AEBycjJCQ0PbVTZHplQq21W/zp07S1ga6bVUP19fX/z666+Q\ny+XiRAO9Xo977rkH3t7eNi6pZdr7/Tk6KernqN+zq3937dFqUNm1axeeeOIJk88NHz4cqamp7Q4q\nISEhKCoqEh8XFRUhKCjI5DkhISHQ6XSorq6Gn59fk2vFx8cjPj5efOzKCQldPeFia/WLjY1t0tqq\nqqpCVVWVDUtpOXf//tpKqu9Zyllkrv7ddezY0eLXthpUrl69ijvvvNPkc7169WoyoG6JmJgY3Lhx\nAwUFBQgODsaxY8cwd+5co3P69++Pw4cPo2fPnvj1119x1113STbzjJwTExC6Bym+Z84is502TSmu\nqakx2dTUaDSoq6trdyEUCgWee+45rFq1Cnq9HqNGjUJUVBRSU1MRExODAQMG4MEHH8SmTZvw//7f\n/4Ofnx/mz5/f7vclcjfuuubDkTajc3WtBpVu3brh119/xahRo5o8d/z4cXTr1k2SgvTr16/JpIAp\nU6aIf/b09MRLL70kyXsRuSN3/rXOWWS20+qU4kceeQSffvopdu3ahcLCQmi1WhQWFmLXrl1ISUnB\no48+aotyElE7ufOaD1dYm+UsWm2p3HPPPZg1axY+++wzfP755+Lx0NBQvPDCC7j77rutWkAikoY7\n/1p31B0vXVGrQaW2thY5OTno0qULYmNjMWHCBPj7+7drdgAR2Z6rrPmwZFzIFdZmOYtWu7+2bt2K\nkydPonPnzrh69SqOHj3KgELkhFwlk0JmZiZKS0tRV1dnVoZt7nhpG60GlTNnzmDZsmV4+umnsWTJ\nEpw8edIW5SIiiRl+rZuzdbSjcedxIWfRpu4vw0LE0NBQVFdXW71QRGQdzr62p6KiAiUlJdBqtVAq\nlQgICICHh4dbjAs5i1aDik6nw9mzZ8XHer3e6DEA9OnTR/qSETk4d13zYS8ajQYFBQWora2FXC6H\nVquFRqNBWFgYcwA6kFaDSmBgIP72t7+Jj/38/Iwey2QybNq0yTqlI3JQ7rzmw17y8vIQGBiIwsJC\nCIIAmUwGvV6PsrKydqeKIum0GlQ2b95si3IQORWu0LY9jUYDT09PREREoKysDFqtFl5eXggLC2Mg\ndyCtBhUiasqd13zYi2FKtFKpFLfB0Ov1JhPLkv20OvuLiJriCm3bc4Up0e6AQYXIArzB2Z4rTIl2\nB+z+IrIAV2jbh7NPiXYHDCpEFuINjqgpdn8REZFkGFSIiEgy7P4iMoGr5Yksw6BC1AhXyxNZjt1f\nRI0wEy6R5RhUiBrhankiyzGoEDXC1fJElmNQIWqEq+WJLMeBeqJGuFqeyHIMKkQmcLU8kWXY/UVE\nRJJhUCEiIskwqBARkUe9dB8AABBYSURBVGQYVIiISDIMKkREJBnO/iIil8XEoLbHoEJETqctwYKJ\nQe2D3V9E5FQMwaK0tBR1dXUoLS1FZmZmk9xsTAxqHwwqRORU2hosmBjUPhhUiMiptDVYMDGofTCo\nEJFTaWuwYGJQ+2BQISKn0tZgYUgMqlar4enpCbVazUF6G+DsLyJyKuZkkWZiUNtjUCEip8Ng4bjY\n/UVERJJhS4XcHlddE0mHQYXcGlddux7+SLAvdn+RW+Oqa9fS1tX2ZD1sqZBbc/dV1672q97UjwS9\nXo+8vDwO7NsIgwq5NZVK1SSwuMuqa1fq+jMExz/++AMAEBAQAA8PDwDu9SPBEbD7i9yaO6+6dpWu\nv4ZdXgBQU1ODgoIC1NfXA3CfHwmOgi0VcmvmLKRzNbbq+rN2F1vD4BgYGAiNRgNBEFBeXo6goCC3\n+ZHgKOweVCorK7FhwwYUFhYiLCwMCxYsgJ+fX5PzVq1ahezsbNxxxx1YvHixHUpKrspdF9LZouvP\nFl1sDeugVCoRERGBsrIyAIBarXabHwmOwu7dXzt27EBcXBzee+89xMXFYceOHSbPmzx5MubMmWPj\n0hG5Llt0/dmii61xgkmlUomgoCB0794dsbGxDCg2ZvegkpGRgREjRgAARowYgYyMDJPnxcXFwdvb\n25ZFI3Jptki4aIsuNnceF3NEdu/+KisrQ1BQEAAgKCgI5eXl7bpeeno60tPTAQDJyckIDQ1tdxkd\nlVKpZP2cmKPUr3Pnzla5rlKpRFhYGIqKipp0sYWEhEha95CQEFy6dAnV1dXw8fFBTEyMVX+EOsp3\n54hsElRWrFghzsxoaOrUqZK/V3x8POLj48XHt27dkvw9HEVoaCjr58TcoX5qtRq5ubliF5ihFRET\nEyN53SMjI8U/V1VVoaqqStLrN+Tq313Hjh0tfq1Ngsry5cubfS4wMBAlJSUICgpCSUkJAgICbFEk\nIrIBd55d567s3v01YMAAHDlyBImJiThy5AgGDhxo7yIRkYTcdXadu7L7QH1iYiIyMzMxd+5cZGZm\nIjExEQBw6dIlfPjhh+J5r7/+OtavX4+srCzMnDkTZ86csVeRiYioGTJBEAR7F8Karl+/bu8iWI2r\n9+uyfs7NlevnynUD2jemYveWChERuQ4GFSIikgyDChERSYZBhYiIJMOgQkREkmFQISIiyTCoEBGR\nZBhUiIhIMgwqREQkGQYVIiKSDIMKERFJhkGFiIgkw6BCRESSYVAhIiLJ2H2TLiKyHo1Gw10XyaYY\nVIhclEajQWZmprg/vEajQUlJCfr27cvAQlbD7i8iF5WXlycGFACQy+WQyWTIy8uzc8nIlTGoELko\njUYjBhQDQ4uFyFoYVIhclEqlgl6vNzqm1+vZ9UVWxaBC5KKioqIgCIIYWPR6PQRBQFRUlJ1LRq6M\nA/VELkqlUqFv376c/UU2xaBC5MJUKhViY2PtXQxyI+z+IiIiyTCoEBGRZBhUiIhIMgwqREQkGQYV\nIiKSDIMKERFJhkGFiIgkw6BCRESSYVAhIiLJMKgQEZFkGFSIiEgyDCpERCQZBhUiIpIMgwoREUmG\nQYWIiCTDoEJERJJhUCEiIskwqBARkWQYVIiISDIMKkREJBkGFSIikgyDChERSYZBhYiIJKO0dwEq\nKyuxYcMGFBYWIiwsDAsWLICfn5/ROZcvX8bHH3+MmpoayOVyPProoxg6dKidSkxERM2xe1DZsWMH\n4uLikJiYiB07dmDHjh14+umnjc7x9PTEnDlz0KFDBxQXF2Px4sW4++674evra6dSExGRKXbv/srI\nyMCIESMAACNGjEBGRkaTczp27IgOHToAAIKDgxEYGIjy8nKblpOIiFpn95ZKWVkZgoKCAABBQUGt\nBouLFy9Cq9UiIiLC5PPp6elIT08HACQnJyM0NFTaAjsQpVLJ+jkx1s95uXLd2ssmQWXFihUoLS1t\ncnzq1KlmXaekpATvv/8+Zs+eDbncdCMrPj4e8fHx4uNbt26ZV1gnEhoayvo5MdbPebly3YDbvUOW\nsklQWb58ebPPBQYGoqSkBEFBQSgpKUFAQIDJ86qrq5GcnIypU6eiZ8+e1ioqERG1g93HVAYMGIAj\nR44AAI4cOYKBAwc2OUer1WLdunUYPnw47rvvPlsXkYiI2sjuYyqJiYnYsGEDDh06hNDQULz00ksA\ngEuXLuHAgQOYOXMmjh07hvPnz6OiogKHDx8GAMyePRvdunWzX8GJiKgJmSAIgr0LYU3Xr1+3dxGs\nxtX7dVk/5+bK9XPlugHtG1Oxe/cXERG5DgYVIiKSDIMKERFJhkGFiIgkw6BCRESSYVAhIiLJMKgQ\nEZFkGFSIiEgyDCpERCQZBhUiIpIMgwoREUmGQYWIiCTDoEJERJJhUCEiIskwqBARkWQYVIiISDIM\nKkREJBkGFSIikgyDChERSYZBhYiIJMOgQkREkmFQISIiyTCoEBGRZBhUiIhIMgwqREQkGQYVIiKS\nDIMKERFJhkGFiIgkw6BCRESSYVAhIiLJMKgQEZFkGFSIiEgyDCpERCQZBhUiIpIMgwoREUmGQYWI\niCTDoEJERJJhUCEiIskwqBARkWQYVIiISDIMKkREJBkGFSIikgyDChERSYZBhYiIJMOgQkREklHa\nuwCVlZXYsGEDCgsLERYWhgULFsDPz8/onMLCQqxbtw56vR46nQ7jxo3DmDFj7FRiIiJqjt2Dyo4d\nOxAXF4fExETs2LEDO3bswNNPP210TlBQEFauXAkPDw9oNBosXLgQAwYMQHBwsJ1KTUREpti9+ysj\nIwMjRowAAIwYMQIZGRlNzlEqlfDw8AAA1NfXQ6/X27SMRETUNnZvqZSVlSEoKAjA7RZJeXm5yfNu\n3bqF5ORk3Lx5E08//TRbKUREDsgmQWXFihUoLS1tcnzq1KltvkZoaCjWrVuH4uJirF27FkOGDIFa\nrW5yXnp6OtLT0wEAycnJ6Nixo+UFdwKsn3Nj/ZyXK9etXQQ7mzt3rlBcXCwIgiAUFxcLc+fObfU1\nmzdvFn755ZdWz3v11VfbXT5Hxvo5N9bPebly3QShffWz+5jKgAEDcOTIEQDAkSNHMHDgwCbnFBUV\noa6uDsDt2WIXLlzgrwQiIgdk9zGVxMREbNiwAYcOHUJoaCheeuklAMClS5dw4MABzJw5E9euXcNn\nn30GmUwGQRDw0EMPoUuXLnYuORERNWb3oOLv74/XX3+9yfGYmBjExMQAAPr27Yt169aZfe34+Ph2\nl8+RsX7OjfVzXq5cN6B99ZMJgiBIWBYiInJjdh9TISIi12H37i8puXrKl7bU7/Lly/j4449RU1MD\nuVyORx99FEOHDrVTic3TlvoBwKpVq5CdnY077rgDixcvtkNJzXPmzBls27YNer0eo0ePRmJiotHz\n9fX12LRpE3JycuDv74/58+cjPDzcTqU1T2t1+/3335GSkoIrV65g/vz5GDJkiJ1KapnW6rdr1y4c\nPHgQCoUCAQEBmDVrFsLCwuxUWvO1Vr/9+/dj3759kMvlUKlUeOGFF9C5c+eWLyrVFDRH8Pnnnwtp\naWmCIAhCWlqa8Pnnnzc5p76+XqirqxMEQRBqamqEF198USgqKrJpOS3Vlvpdu3ZNuH79uiAIglBU\nVCTMmDFDqKystGk5LdWW+gn/v737CWnyj+MA/ja1TGarPZU1GgmSB0ux8jA9SNFllzrYoQ6C4CmY\nhw6lp0IoKEn0YFEyKMRTwvQU2KVCJATFYHYQWlsopZVzwnCM+cxvh/g9sH4rv87v/jzj/Tpt+uzh\n8+Y5fJ7n+zzf7yOE8Pl8YmZmRjx48CCb5aUlkUiIzs5OsbKyIjY3N8WtW7fE0tJS0jYTExNiaGhI\nCCHE1NSU6O/vz0WpOyaT7fv37+LLly9icHBQahpAPpHJNz8/L2KxmBBCiNevX5vm2Akhl29jY8P4\nPDMzI+7fv7/tfgtq+KvQl3yRyWe323H8+HEAgM1mg9Vq/esqBflGJh8A1NXVYf/+/dksLW1+vx/H\njh1DZWUlSkpK0Nzc/L9cs7OzuHDhAgDA6XTi48ePECa41SmT7ejRozh58iSKiopyVGX6ZPKdOXMG\n+/btAwCcOnUKa2truSg1LTL5ysvLjc+xWEzqOBbU8FehL/kim+8/fr8fuq6jsrIyG+Xt2k7zmcHa\n2ho0TTO+a5qGT58+/XWb4uJilJeXIxKJ4MCBA1mtdadkspnZTvO9efMGDQ0N2ShNCdl8ExMTePXq\nFXRdT/mk7p9M11SyueRLLqjIBwDhcBiDg4Nwu93Ysyd/LkhV5TOLVFccf57tyWyTj8xat6yd5Juc\nnEQgEEBPT0+Gq1JHNp/L5YLL5cLU1BS8Xi86Ozv/uV/TNZU7d+789X9WqxXhcBiHDh1COBze9kzP\nZrPB4XBgYWEhb24gqsgXjUbx8OFDXL9+HTU1NZkqNS0qj58ZaJqGUChkfA+FQsbV2J/baJqGRCKB\naDSa8gGFfCOTzcxk8/l8PoyPj6Onp8cYWjeDnR6/5uZmeDyebfebP6ewChT6ki8y+XRdR19fH1pa\nWtDU1JTtEndFJp/ZVFdXY3l5GT9+/ICu63j//j0aGxuTtjl//jzevXsHAJiensbp06dNccYvk83M\nZPIFg0F4PB50dXXBarXmqNL0yORbXl42Ps/NzRn3a/+loCY/RiIRDAwMYHV11VjyxWKxJC354vP5\nkpZ8cblcppkdK5NvcnIST58+TXrsz+12o6qqKneFS5LJBwB3797F169fEYvFUFFRgRs3buT1WPbc\n3ByGh4extbWFixcvorW1FS9fvkR1dTUaGxsRj8fx+PFjBINBWCwW3Lx50zT3wbbL5vf70dfXh42N\nDZSWluLgwYPo7+/PddnStst37949LC4uGsPnhw8fRnd3d46rlrddvhcvXmB+fh7FxcWwWCzo6OiA\nw+H45z4LqqkQEVFuFdTwFxER5RabChERKcOmQkREyrCpEBGRMmwqRESkDJsKEREpY7oZ9UT5yO12\nY3193Vgi/OzZs+jo6EBZWRmA30uMj4+PIxgMorS0FCdOnMDly5dTThZcXFzEyMgIAoEAIpEIRkdH\nsx2HKG28UiFSpLu7GyMjI+jt7cXnz5/h9XoB/J4lPzAwgJaWFjx79gwejwfXrl3D7Oxsyv2UlJSg\nqanJmOxJZCa8UiFSzGazoaGhAUtLSxBCYHh4GFevXsWlS5eMbWpra1FbW5vy93a7HXa7HSsrK9kq\nmUgZXqkQKba6uooPHz6gqqoK3759QygUypsFS4kyjVcqRIo8evTIeB/KuXPn0NraikAgAAB582oF\nokxjUyFS5Pbt26ivr0/6W0VFBQBgfX3dNO+dJ9oNDn8RZZDdboemaZiens51KURZwaZClEFFRUVo\nb2+H1+vF27dvEY1GsbW1hYWFBQwNDaX8jRAC8Xgcuq4DAOLxODY3N7NZNlHaOPxFlGFOpxNlZWUY\nGxvD8+fPsXfvXjgcDly5ciXl9j9//kx6ZWtbWxuOHDmCJ0+eZKtkorTxfSpERKQMh7+IiEgZNhUi\nIlKGTYWIiJRhUyEiImXYVIiISBk2FSIiUoZNhYiIlGFTISIiZdhUiIhImV/+o8OZ+cnn9QAAAABJ\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a163b29e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assign name to loadings plot\n",
    "loadings = PLS.x_loadings_\n",
    "\n",
    "# Graph x loadings for PC1 and PC2\n",
    "plt.figure(2, figsize=(6,6))\n",
    "plt.scatter(loadings[:,0], loadings[:,1], c='gray', alpha = alph)\n",
    "plt.scatter(loadings[79,0], loadings[79,1], c='r', label = '(1) p-p38, 4hr')\n",
    "plt.scatter(loadings[85,0], loadings[85,1], c='b', label='(2) p-HSP27, 4hr')\n",
    "plt.scatter(loadings[34,0], loadings[34,1], c='g', label='(3) p-Akt, late avg')\n",
    "plt.scatter(loadings[37,0], loadings[37,1], c='k',label='(4) p-p70 S6K, 4hr')\n",
    "plt.xlim(-0.3,0.3)\n",
    "plt.ylim(-0.3,0.3)\n",
    "plt.xlabel('PC 1')\n",
    "plt.ylabel('PC2')\n",
    "plt.title('PLSR model loadings')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This loadings plot indicates how much each measured parameter contributes to principle components 1 and 2. Points further away from zero will have a larger magnitude, and thus, a larger contribution. Points that are closer to the origin of (0,0) are considered to contribute less to the covariance between X and Y. For example, we see that data point 1 has positive values for both PC1 and PC2. This means that as we increase the value of this data point, both PC1 and PC2 will increase. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (4) Recreate a 4-principle component model using PLSR with just the final 4 phosphoprotein model. Plot predicted LDH versus observed LDH for this model. Report the model fitness (R^2). Define here how you are calculating R^2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "inputHidden": false,
    "outputHidden": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nT9YVV1wRjRoBAEh4zQZyTU2NHnvsMaWnp+uGG25QRkaG3G63du7cqffff1/5+fnKyMiIVq0AACSs\nZgP57bffVnZ2tmbPni2r9dsF2dOnT9fSpUv19ttv6/777494kQAAJLpmb3v65JNPNH36dL8wliSL\nxaI77rhDn3zySUSLAwCgvWg2kKurq5t8wsiVV16p6urqiBQFAEB70+KDQS4eHZ9ns9m4DxgAgDBp\n9hryuXPntHz58qCfGYah+vr6iBQFAEB702wg33777c3+8L/927+FtRgAANqrZgP5jjvuaPIzwzC0\nd+/esBcEAEB71ObNJTwej5555plw1gIASCBGRZm8762XUVEW61LiQtzshwwAiB9GRZm8BfMlj0eG\n3S7rI4vYtrIFcbP9IgAgfhjluyWPRzK8UoOn8TWa1ewI2ev1tukzAIgXRkWZjPLdsmQPZAQXRpbs\ngTLsdqnBI9nssmQPjHVJptdsIN95553RqgMAoo5p1cixZOXI+sgiftlphWYDual7kAEgEQSbViU4\nwseSlcPfZys0G8iZmZnRqgMAoo5pVZgJq6wBtFtMq8JMCGQA7RrTqjALbnsCAMAECGQAAEygySnr\nn//85yFtr/iLX/wirAUBANAeNRnIY8eO9f35+PHj+tvf/qZRo0YpMzNTLpdLmzdv1pgxY6JSJAAA\nia7JQB49erTvz08++aSefPJJ9erVy/fezTffrBUrVmj69OkRLRAAgPYgpGvIX375pbp27er3Xpcu\nXfTVV19FpCgAANqbkAK5f//+Kioq0tGjR3Xu3DkdOXJEK1asUE4OtwoAABAOId2H/JOf/EQrV67U\nnDlz5PV6ZbPZNGzYMM2aNStshRQVFam0tFSdOnVSQUFBwOeGYWj16tXatWuXLrvsMs2aNUt9+vQJ\n2/kBAIilkAI5LS1Ns2fPltfrVW1trdLT02W1hveOqdGjR2vChAkqLCwM+vmuXbt07NgxLVu2TAcO\nHNDKlSv13HPPhbUGAABiJeRU/fLLL/X222/rt7/9raxWq44cOaLPP/88bIX0799faWlpTX5eUlKi\nW265RRaLRf369dOpU6dUXV0dtvMDABBLIY2Qt23bppUrV2r48OH64IMPdP/99+vMmTN68803tWDB\ngkjXKElyu91yOp2+1w6HQ263WxkZGX7tiouLVVxcLEnKz8/3+xkzs9vtcVNrayVy36TE7h99i0+J\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1e8a04a8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2Y value = 0.89387271269 .\n"
     ]
    }
   ],
   "source": [
    "# Create new Xs\n",
    "fourPhosX = np.zeros((66,24))\n",
    "for i in range (0,24):\n",
    "    index = ind4pProtein[i]-1\n",
    "    fourPhosX[:,i] = X[:,index]\n",
    "\n",
    "# Learn and apply the dimension reduction on the train data\n",
    "fourPhosX_scaled = scale(fourPhosX)\n",
    "PLS.fit(fourPhosX_scaled, Y48_scaled)\n",
    "Y48_predicted = PLS.predict(fourPhosX_scaled)\n",
    "\n",
    "# Plot predicted LDH versus observed LDH\n",
    "plt.figure(3,figsize=(7.5,5))\n",
    "plt.plot(Y48_predicted, Y48_scaled,'.')\n",
    "plt.xlabel('Predicted LDH')\n",
    "plt.ylabel('Observed LDH')\n",
    "plt.show()\n",
    "\n",
    "# Score X and Y48\n",
    "R2Y = PLS.score(fourPhosX_scaled,Y48_scaled)\n",
    "print('R2Y value =', R2Y,'.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the final 4 phosphoprotein model, the calculated R2Y was 0.894, and since this value is relatively close to 1, we know that the model is a good predictor of the observed LDH. We can compare this to the R2Y value calculated using all 17 phosphoproteins, which was just slightly higher at 0.923. Thus, it would be fair to say that the model with all phosphoproteins may be slightly more accurate, the final 4 phosphoprotein model is still a valuable prediction method if you want to work with a smaller volume of data. Another way we can determine fitness of the model is the relatively linear relationship between the predicted and observed LDH values, as plotted on the graph. \n",
    "\n",
    "R^2, or R2Y, is calculated here as R^2 = 1-(x/y) where x is the sum of the square of the differences between the observed LDH values and the predicted LDH values, and y is the sum of the squares of the observed LDH values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (6) Cosgrove et al. Discusses their method for model validation using leave- one-out cross-validation. Calculate all LDH predictions for leave-one-out cross-validation and calculate the R^2 value for the resulting yfit values. What is the R^2 value? Why do you think it’s important to perform cross-validation?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2Y value = 0.84187328868 .\n"
     ]
    }
   ],
   "source": [
    "# Rename LeaveOneOut\n",
    "loo = LeaveOneOut()\n",
    "\n",
    "# Initialize zero vectors for training and test sets for both X and Y \n",
    "Xtrain = np.zeros((65,102))\n",
    "Ytrain = np.zeros(65)\n",
    "Xtest = np.zeros(102)\n",
    "Ytest = np.zeros(1)\n",
    "predictions = np.zeros(66) \n",
    "count = 0\n",
    "\n",
    "# Split Xs into training and test sets\n",
    "for train, test in loo.split(X):\n",
    "    \n",
    "    # Create new matrices for training and test data\n",
    "    Xtrain, Xtest = X_scaled[train], X_scaled[test]\n",
    "    Ytrain, Ytest = Y48_scaled[train], Y48_scaled[test]\n",
    "    \n",
    "    # Learn the dimension reduction on the training data\n",
    "    PLS.fit(Xtrain, Ytrain)\n",
    "    \n",
    "    # Predict Ytest\n",
    "    Y48_predicted = PLS.predict(Xtest)\n",
    "    predictions[count] = Y48_predicted\n",
    "    \n",
    "    # Add 1 to counter for each new set of training and test data\n",
    "    count +=1\n",
    "\n",
    "# Calculate and print R2Y value\n",
    "num = np.sum((Y48_scaled - scale(predictions))**2)\n",
    "denom = np.sum((Y48_scaled**2))\n",
    "R2Y = 1-(num/denom)\n",
    "print('R2Y value =', R2Y,'.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As indicated above, the R^2 value is equal to 0.842 using leave-one-out cross-validation. Performing cross-validation is an important step for ensuring that our model maintains a low test error. Withot cross-validation, we would be fitting out model using all available sample data, and would have no data remaining on which we could test the model. This could easily result in a model that is overfit to our sample data and cannot accurately predict data outside our sample set. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (7) Now, instead of performing LOOCV, let's perform leave-one-cytokine-out cross-validation. That is, one cytokine at a time, leave out all the data for the `NoCyt`, `IL-1`, `LPS`, `TNF`, `IL-6`, or `Mix` conditions.\n",
    "\n",
    "Hint: Look at `sklearn.model_selection.LeaveOneGroupOut`.\n",
    "\n",
    "How does this affect your cross-validation? How do the two approaches here differ? When might each be most appropriate?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2Y value = 0.858751197771 .\n"
     ]
    }
   ],
   "source": [
    "# Rename LeaveOneGroupOut function\n",
    "logo = LeaveOneGroupOut()\n",
    "\n",
    "# Create groups array\n",
    "groups = np.zeros(66)\n",
    "for i in range(0,66):\n",
    "    groups[i]=i%6\n",
    "    \n",
    "# Initialize zero vectors for training and test sets for both X and Y \n",
    "scores = np.zeros(65)\n",
    "R2Ys = np.zeros(6) \n",
    "predictions = np.zeros(66)\n",
    "scores = np.zeros(6)\n",
    "count = 0\n",
    "\n",
    "for train, test in logo.split(X_scaled, Y48_scaled, groups):\n",
    "    \n",
    "    # Create new matrices for training and test data\n",
    "    Xtrain, Xtest = X_scaled[train], X_scaled[test]\n",
    "    Ytrain, Ytest = Y48_scaled[train], Y48_scaled[test]\n",
    "\n",
    "    # Learn the dimension reduction on the training data\n",
    "    PLS.fit(Xtrain, Ytrain)\n",
    "    \n",
    "    # Predict Ytest\n",
    "    Y48_predicted = PLS.predict(Xtest)\n",
    "    predictions[test] = np.squeeze(Y48_predicted)\n",
    "    \n",
    "    # Add 1 to counter for each new set of training and test data\n",
    "    count += 1\n",
    "\n",
    "# Calculate and print R2Y value\n",
    "num = np.sum((Y48_scaled - scale(predictions))**2)\n",
    "denom = np.sum((Y48_scaled**2))\n",
    "R2Y = 1-(num/denom)\n",
    "print('R2Y value =', R2Y,'.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "The leave-one-cytokine-out cross-validation method gives us a slightly higher R^2 value than the original leave-one out cross-validation, however, they do not differ greatly. This indicates that they are both valid models for prediction. While the original method would leave out one cytokine/drug combination, this method will leave out one cytokine for all 11 drugs. As such, the second model is a more general approach and is more appropriate if we want to predict LDH values for new cytokines not included in the original set. Conversely, the first model would be more appropriate if we are working with more data dealing with these specific drugs and cytokines from the sample data. "
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "nteract": {
   "version": "0.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
