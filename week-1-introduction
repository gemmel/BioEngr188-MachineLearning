{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Import data sets\n",
    "%matplotlib inline\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# (1) Write a function that stores the first 100 numbers of the fibannaci sequence in a numpy array. \n",
    "import numpy as np\n",
    "SeqNum = 100\n",
    "FibSeq = np.zeros(SeqNum)\n",
    "FibSeq[1] = 1\n",
    "for x in range (2,SeqNum):\n",
    "    FibSeq[x] = FibSeq[x-2] + FibSeq[x-1]\n",
    "    \n",
    "# Then write two assertions as tests of your function.\n",
    "assert FibSeq[20] == 6765\n",
    "assert FibSeq[80] == 23416728348467685"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'Crime')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a15cec940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# (2) Plot the selected data from this Boston home price dataset, labeling the X and Y axes.\n",
    "#%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "boston = datasets.load_boston()\n",
    "y = boston.target\n",
    "x = boston.data[:, 0]\n",
    "\n",
    "plt.plot(x,y,'.')\n",
    "\n",
    "plt.ylabel('Home Prices')\n",
    "plt.xlabel('Crime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# (3) Write a function that satisfies the assertions below.\n",
    "def func (x,y):\n",
    "    return (2*y + x)\n",
    "\n",
    "assert(func(0, 20) == 40)\n",
    "assert(func(1, 10) == 21)\n",
    "assert(func(2, 5) == 12)\n",
    "assert(func(3, 2) == 7)\n",
    "assert(func(4, 1) == 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#(4) Briefly describe one skill and/or ability you would like to take away from this class. \n",
    "\n",
    "# Through this class I hope to gain a stronger knowledge of statistics and modeling in order to improve my ability to \n",
    "# thoughtfully analyze data from my own research and from the findings of others. I also hope to get better at \n",
    "# programming with Python, as before the class I had never used the language. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# (5) Describe your previous experience with programming, statistics, and modeling, including courses and which \n",
    "# languages you've used. There is no wrong answer here—this will help us better tailor the class.\n",
    "\n",
    "# I have minimal experience with statistics and modeling and have taken one programming class so far, which was the \n",
    "# introductory MATLAB course. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
